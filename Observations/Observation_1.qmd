---
title: "Observation on Seasonality of Oceanus Catch"
author: "Group 1 - Arya Siahaan, Seng Jing Yi, Thet Myat Noe"
date: "June 24, 2024"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
editor: visual

format:
  html:
    code-fold: true
---

```{r}
pacman::p_load(jsonlite, tidyverse, tidyr, 
               knitr, lubridate, dplyr, 
               igraph, ggraph, ggdist, ggplot2, 
               SmartEDA, sf, tidygraph, reshape2, readr,
               DT, patchwork,plotly)

tx_qty <- read_csv("data/tx_qty.csv")
ping_activity <- read_csv("data/ping_activity.csv")
E_Hbrpt_v <- read_csv("data/hbrpt.csv")
N_vessel <- read_csv("data/N_vessel.csv")
#location_legend <- read_csv("data/location_legend.csv")
#vessel_movement <- read_rds("data/rds/vessel_movement_data.rds")
nearest_tx_date <- read_csv("data/mapped_records.csv")
time_summary_df <- read_csv("data/time-summary.csv")

```

## Unauthorised - Vessels with Possibility of Illegal Fishing

Based on the `Transponder Ping` records, we observed the following vessels may have overstayed their visits to ecological preserves.

```{r}
ping_activity$start_time <- ymd_hms(ping_activity$start_time)
ping_activity$month <- floor_date(ping_activity$start_time, "month")

# Convert the month column to Date format (first day of each month)
ping_activity$month <- as.Date(ping_activity$month)

# Calculate median dwell time per vessel_id per month for each area
agg_data <- ping_activity %>%
  group_by(area, vessel_id, month) %>%
  summarise(median_dwell = median(dwell, na.rm = TRUE)) %>%
  ungroup()

agg_data2 <- agg_data %>%
  group_by(area, month) %>%
  mutate(`90%_dwell_time` = quantile(median_dwell, 0.90, na.rm = TRUE)) %>%
  mutate(`Is_above_90%` = ifelse(median_dwell > `90%_dwell_time`, "Yes", "No")) %>%
  ungroup()

# count the number of times that vessel stayed >90% dwell time
summary_data <- agg_data2 %>%
  filter(`Is_above_90%` == "Yes") %>%
  group_by(vessel_id, area) %>%
  summarise(count_above_90 = n()) %>%
  spread(key = area, value = count_above_90, fill = 0)

# return vessels that overstayed preserve 2 or more times
overstay_ghoti <- summary_data %>%
  filter(`Ghoti Preserve` > 0 )

vessel_overstay_ghoti <- unique(overstay_ghoti$vessel_id)

overstay_nemo <- summary_data %>%
  filter(`Nemo Reef` > 0 )

vessel_overstay_nemo <- unique(overstay_nemo$vessel_id)

overstay_donlimpet <- summary_data %>%
  filter(`Don Limpet Preserve` > 0)

vessel_overstay_donlimpet <- unique(overstay_donlimpet$vessel_id)

## generating data table 

overstay_locations <- c(rep("Ghoti Preserve", length(vessel_overstay_ghoti)),
                        rep("Nemo Reef", length(vessel_overstay_nemo)),
                        rep("Don Limpet Preserve", length(vessel_overstay_donlimpet)))

vessel_ids <- c(vessel_overstay_ghoti, vessel_overstay_nemo, vessel_overstay_donlimpet)

# Create a data frame
overstay_data <- data.frame("Overstay Location" = overstay_locations, "Vessel ID" = vessel_ids)

# Summarize by concatenating vessel IDs as a single string for each location
overstay_summary <- aggregate(Vessel.ID ~ Overstay.Location, data = overstay_data, paste, collapse = ", ")

# Print the first 3 rows
print(head(overstay_summary, 3))
```

-   Looking at the route of these vessels, we observe the common path taken by these vessels.

-   Diving into the associated cargo for these vessels, we observe the quantity of cargo

## Unregulated - Vessels with possibility of Overfishing

-   Repeatedly high cargo catch (cargo quantity / vessel's tonnage)

-   Filter to return the vessels where frequency at above 90 percentile \>= 5 times each month.

```{r}
vessel_cargo_map <- nearest_tx_date %>% 
  left_join(N_vessel, by = c("vessel_id" = "vessel_id")) %>% 
  group_by(cargo_id, tx_date, vessel_id, fish_species) %>%
  summarise(percent_fill = qty_tons/tonnage)

vessel_cargo_map <- vessel_cargo_map %>% mutate(tx_date = as.Date(tx_date))

vessel_cargo_map <- vessel_cargo_map %>%
  group_by(fish_species, month = floor_date(tx_date, "month")) %>%
  mutate(monthly_mean = mean(percent_fill),
         percentile_90 = quantile(percent_fill, 0.90)) %>%
  ungroup()

p <- ggplot(vessel_cargo_map, aes(x = tx_date, y = percent_fill, text = vessel_id)) +
  geom_point(aes(color = percent_fill > percentile_90)) +
  scale_color_manual(values = c("FALSE" = "black", "TRUE" = "red")) +
  geom_line(aes(y = monthly_mean), linetype = "dashed", color = "blue") +
  facet_wrap(~ fish_species, scales = "free_y") +
  labs(title = "Percent Fill Over Time by Fish Species",
       x = "Transaction Date",
       y = "Percent Fill",
       color = "Above 90th Percentile") +
  theme_minimal()

# Make the plot interactive with ggplotly
p_interactive <- ggplotly(p, tooltip = c("text", "percent_fill", "monthly_mean"))
            
```

```{r}
vessel_cargo_map_above_90th <- vessel_cargo_map %>%
  filter(percent_fill > percentile_90)

# Summarize the count of records per vessel_id, month, and fish species
summary <- vessel_cargo_map_above_90th %>%
  group_by(vessel_id, month, fish_species) %>%
  summarize(count_records_above_90th = n()) %>% 
  filter(count_records_above_90th >=5) %>%
  ungroup()

unique(summary$vessel_id)

datatable(summary, option = list(page_length = 5), filter = "top")
```

## Disrupted vessels after SSEC was caught

-   Returns route diversion for the vessels

-   Returns list of vessel_ids that have diverted from Ghoti in June, after SSEC was caught in May

```{r}
vessel_trips <- time_summary_df %>%
  mutate(start_date = as.Date(start_date))

# Define the cutoff date for 14 May 2035
cutoff_date <- as.Date("2035-05-14")

trips_before_cutoff <- vessel_trips %>%
  filter(start_date <= cutoff_date)

# Filter trips that started in June 2035
trips_in_june <- vessel_trips %>%
  filter(start_date >= as.Date("2035-06-01") & start_date < as.Date("2035-07-01"))

# Filter trips that started after 14 May 2035
trips_after_cutoff <- vessel_trips %>%
  filter(start_date > cutoff_date)

# Function to get unique areas
get_unique_areas <- function(data) {
  data %>%
    pull(unique_areas) %>%
    strsplit(", ") %>%
    unlist() %>%
    unique()
}

# Get unique areas per vessel before the cutoff date
areas_before_cutoff <- trips_before_cutoff %>%
  group_by(vessel_id) %>%
  summarize(areas_before = list(get_unique_areas(cur_data())))

# Get unique areas per vessel after the cutoff date
areas_after_cutoff <- trips_after_cutoff %>%
  group_by(vessel_id) %>%
  summarize(areas_after = list(get_unique_areas(cur_data())))

# Get unique areas per vessel in June 2035
areas_in_june <- trips_in_june %>%
  group_by(vessel_id) %>%
  summarize(areas_june = list(get_unique_areas(cur_data())))

# Combine the data
combined_areas <- full_join(areas_before_cutoff, areas_after_cutoff, by = "vessel_id") %>%
  full_join(areas_in_june, by = "vessel_id")

# Determine new areas visited, old areas avoided, and old areas avoided in June for each vessel
results <- combined_areas %>%
  rowwise() %>%
  mutate(new_areas = if(length(setdiff(areas_after, areas_before)) > 0) 
                        paste(setdiff(areas_after, areas_before), collapse = ", ") else NA,
         old_areas_avoided = if(length(setdiff(areas_before, areas_after)) > 0) 
                                paste(setdiff(areas_before, areas_after), collapse = ", ") else NA,
         old_areas_avoided_june = if(length(setdiff(areas_before, areas_june)) > 0) 
                                    paste(setdiff(areas_before, areas_june), collapse = ", ") else NA,
         new_areas_count = ifelse(is.na(new_areas), 0, length(unlist(strsplit(new_areas, ", ")))),
         old_areas_avoided_count = ifelse(is.na(old_areas_avoided), 0, length(unlist(strsplit(old_areas_avoided, ", ")))),
         old_areas_avoided_june_count = ifelse(is.na(old_areas_avoided_june), 0, length(unlist(strsplit(old_areas_avoided_june, ", "))))) %>%
  select(vessel_id, new_areas, old_areas_avoided, old_areas_avoided_june, new_areas_count, old_areas_avoided_count, old_areas_avoided_june_count) %>%
  ungroup()

# Print the results
datatable(results, options = list(pagelength = 10), filter = "top")

subset_with_ghoti <- results %>%
  filter(grepl("Ghoti", old_areas_avoided_june))

# Print the subset
unique(subset_with_ghoti$vessel_id)
```

| IUU                                                                                                                                   | Possible visualisations                                                                                                                                      |
|---------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------|
| **Illegal:** Unauthorised fishing by vessels that are not given the permission to fish from a particular country.                     | Identifying “Unknown” vessels and activities of vessels that are not registered with “Oceanus” flag.                                                         |
| **Unreported**: Fishing activities that are not reported or under-reported to ports which hampers accurate assessment of fish stocks. | Identify vessels that have been identified by transponder ping and port report, but consistently not reporting or under-reporting the volume of fish caught. |
| **Unregulated**: Overfishing that depletes natural fish stocks and disrupts marine ecosystems.                                        | Identify vessels that have consistently out-perform comparable peers, and potentially suggest fishing beyond allowable limits.                               |
